"""
Author: mail@dhariri.com
Date: Jan 7 2025

Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from dataclasses import dataclass
from lib.factors import divisors_of

@dataclass
class TriFac:
    iter: int
    number: int
    factors: list[int]

    def __repr__(self) -> str:
        return f"{self.iter} ({self.number}): {self.factors}"

i = 1

while True:
    t = i * (i + 1) // 2  # Triangle number using integer division

    tri_fac = TriFac(
        i,
        t,
        divisors_of(t)
    )

    if len(tri_fac.factors) > 500:
        print(tri_fac)
        break

    i += 1
